//Import section
import {
  USER_ADD_REQUEST,
  USER_ADD_SUCCESS,
  USER_ADD_FAILURE,

  GET_USER_REQUEST,
  GET_USER_SUCCESS,
  GET_USER_FAILURE,

  GET_USERS_REQUEST,
  GET_USERS_SUCCESS,
  GET_USERS_FAILURE,

  USER_UPDATE_REQUEST,
  USER_UPDATE_SUCCESS,
  USER_UPDATE_FAILURE,

  USER_DELETE_REQUEST,
  USER_DELETE_SUCCESS,
  USER_DELETE_FAILURE,

  SET_STATE,
} from 'examples/code-example/with-init-state/constants/';

import InitialState from 'examples/code-example/with-init-state/states//user-state';

// Main reducer function
export default function usersReducer(state = InitialState, action) {
  switch (action.type) {
    case USER_ADD_REQUEST:
    {
      return {
        ...state,
        isFetching: true,
        error: null,
      };
    }

    case USER_ADD_SUCCESS:
    {
      return {
        ...state,
        isFetching: false,
        users: null,
        success: true,
      };
    }

    case USER_ADD_FAILURE:
    {
      return {
        ...state,
        isFetching: false,
        error: action.payload,
        success: null,
      };
    }

    case GET_USER_REQUEST:
    {
      return {
        ...state,
        isFetching: true,
        error: null,
      };
    }

    case GET_USER_SUCCESS:
    {
      return {
        ...state,
        users: action.payload.users,
        isFetching: false,
        error: null,
      };
    }

    case GET_USER_FAILURE:
    {
      return {
        ...state,
        isFetching: false,
        error: action.payload,
        success: null,
      };
    }

    case GET_USERS_REQUEST:
    {
      return {
        ...state,
        isFetching: true,
        error: null,
      };
    }

    case GET_USERS_SUCCESS:
    {
      return {
        ...state,
        users: action.payload.users,
        isFetching: false,
        error: null,
      };
    }

    case GET_USERS_FAILURE:
    {
      return {
        ...state,
        isFetching: false,
        error: action.payload,
        success: null,
      };
    }

    case USER_UPDATE_REQUEST:
    {
      return {
        ...state,
        isFetching: true,
        error: null,
      };
    }

    case USER_UPDATE_SUCCESS:
    {
      return {
        ...state,
        users: null,
        isFetching: false,
        error: null,
      };
    }

    case USER_UPDATE_FAILURE:
    {
      return {
        ...state,
        isFetching: false,
        error: action.payload,
        success: null,
      };
    }

    case USER_DELETE_REQUEST:
    {
      return {
        ...state,
        isFetching: true,
        error: null,
      };
    }

    case USER_DELETE_SUCCESS:
    {
      return {
        ...state,
        users: null,
        isFetching: false,
        error: null,
      };
    }

    case USER_DELETE_FAILURE:
    {
      return {
        ...state,
        isFetching: false,
        error: action.payload,
        success: null,
      };
    }

    case SET_STATE:
    {
      const {
        users
      } = JSON.parse(action.payload);

      return {
        ...state,
        disabled: users.disabled,
        error: users.disabled,
        isValid: users.isValid,
        isFetching: users.isFetching,
        users: users.users
      };
    }

    default:
    {
      return state;
    }
  }
}
// This file was autogenerated by reducer-maker
